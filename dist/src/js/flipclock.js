/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/flipclock.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/flipclock.js":
/*!*****************************!*\
  !*** ./src/js/flipclock.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n  Base.js, version 1.1a\n  Copyright 2006-2010, Dean Edwards\n  License: http://www.opensource.org/licenses/mit-license.php\n*/\n\nvar Base = function() {\n  // dummy\n};\n\nBase.extend = function(_instance, _static) { // subclass\n  \n  \"use strict\";\n  \n  var extend = Base.prototype.extend;\n  \n  // build the prototype\n  Base._prototyping = true;\n  \n  var proto = new this();\n  \n  extend.call(proto, _instance);\n  \n  proto.base = function() {\n  // call this method from any other method to invoke that method's ancestor\n  };\n\n  delete Base._prototyping;\n  \n  // create the wrapper for the constructor function\n  //var constructor = proto.constructor.valueOf(); //-dean\n  var constructor = proto.constructor;\n  var klass = proto.constructor = function() {\n    if (!Base._prototyping) {\n      if (this._constructing || this.constructor == klass) { // instantiation\n        this._constructing = true;\n        constructor.apply(this, arguments);\n        delete this._constructing;\n      } else if (arguments[0] !== null) { // casting\n        return (arguments[0].extend || extend).call(arguments[0], proto);\n      }\n    }\n  };\n  \n  // build the class interface\n  klass.ancestor = this;\n  klass.extend = this.extend;\n  klass.forEach = this.forEach;\n  klass.implement = this.implement;\n  klass.prototype = proto;\n  klass.toString = this.toString;\n  klass.valueOf = function(type) {\n    //return (type == \"object\") ? klass : constructor; //-dean\n    return (type == \"object\") ? klass : constructor.valueOf();\n  };\n  extend.call(klass, _static);\n  // class initialisation\n  if (typeof klass.init == \"function\") klass.init();\n  return klass;\n};\n\nBase.prototype = {  \n  extend: function(source, value) {\n    if (arguments.length > 1) { // extending with a name/value pair\n      var ancestor = this[source];\n      if (ancestor && (typeof value == \"function\") && // overriding a method?\n        // the valueOf() comparison is to avoid circular references\n        (!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\n        /\\bbase\\b/.test(value)) {\n        // get the underlying method\n        var method = value.valueOf();\n        // override\n        value = function() {\n          var previous = this.base || Base.prototype.base;\n          this.base = ancestor;\n          var returnValue = method.apply(this, arguments);\n          this.base = previous;\n          return returnValue;\n        };\n        // point to the underlying method\n        value.valueOf = function(type) {\n          return (type == \"object\") ? value : method;\n        };\n        value.toString = Base.toString;\n      }\n      this[source] = value;\n    } else if (source) { // extending with an object literal\n      var extend = Base.prototype.extend;\n      // if this object has a customised extend method then use it\n      if (!Base._prototyping && typeof this != \"function\") {\n        extend = this.extend || extend;\n      }\n      var proto = {toSource: null};\n      // do the \"toString\" and other methods manually\n      var hidden = [\"constructor\", \"toString\", \"valueOf\"];\n      // if we are prototyping then include the constructor\n      var i = Base._prototyping ? 0 : 1;\n      while (key = hidden[i++]) {\n        if (source[key] != proto[key]) {\n          extend.call(this, key, source[key]);\n\n        }\n      }\n      // copy each of the source object's properties to this object\n      for (var key in source) {\n        if (!proto[key]) extend.call(this, key, source[key]);\n      }\n    }\n    return this;\n  }\n};\n\n// initialise\nBase = Base.extend({\n  constructor: function() {\n    this.extend(arguments[0]);\n  }\n}, {\n  ancestor: Object,\n  version: \"1.1\",\n  \n  forEach: function(object, block, context) {\n    for (var key in object) {\n      if (this.prototype[key] === undefined) {\n        block.call(context, object[key], key, object);\n      }\n    }\n  },\n    \n  implement: function() {\n    for (var i = 0; i < arguments.length; i++) {\n      if (typeof arguments[i] == \"function\") {\n        // if it's a function, call it\n        arguments[i](this.prototype);\n      } else {\n        // add the interface using the extend method\n        this.prototype.extend(arguments[i]);\n      }\n    }\n    return this;\n  },\n  \n  toString: function() {\n    return String(this.valueOf());\n  }\n});\n/*jshint smarttabs:true */\n\nvar FlipClock;\n  \n/**\n * FlipClock.js\n *\n * @author     Justin Kimbrell\n * @copyright  2013 - Objective HTML, LLC\n * @licesnse   http://www.opensource.org/licenses/mit-license.php\n */\n  \n(function($) {\n  \n  \"use strict\";\n  \n  /**\n   * FlipFlock Helper\n   *\n   * @param  object  A jQuery object or CSS select\n   * @param  int     An integer used to start the clock (no. seconds)\n   * @param  object  An object of properties to override the default  \n   */\n   \n  FlipClock = function(obj, digit, options) {\n    if(digit instanceof Object && digit instanceof Date === false) {\n      options = digit;\n      digit = 0;\n    }\n\n    return new FlipClock.Factory(obj, digit, options);\n  };\n\n  /**\n   * The global FlipClock.Lang object\n   */\n\n  FlipClock.Lang = {};\n  \n  /**\n   * The Base FlipClock class is used to extend all other FlipFlock\n   * classes. It handles the callbacks and the basic setters/getters\n   *  \n   * @param   object  An object of the default properties\n   * @param   object  An object of properties to override the default \n   */\n\n  FlipClock.Base = Base.extend({\n    \n    /**\n     * Build Date\n     */\n     \n    buildDate: '2014-12-12',\n    \n    /**\n     * Version\n     */\n     \n    version: '0.7.7',\n    \n    /**\n     * Sets the default options\n     *\n     * @param object  The default options\n     * @param object  The override options\n     */\n     \n    constructor: function(_default, options) {\n      if(typeof _default !== \"object\") {\n        _default = {};\n      }\n      if(typeof options !== \"object\") {\n        options = {};\n      }\n      this.setOptions($.extend(true, {}, _default, options));\n    },\n    \n    /**\n     * Delegates the callback to the defined method\n     *\n     * @param object  The default options\n     * @param object  The override options\n     */\n     \n    callback: function(method) {\n      if(typeof method === \"function\") {\n        var args = [];\n                \n        for(var x = 1; x <= arguments.length; x++) {\n          if(arguments[x]) {\n            args.push(arguments[x]);\n          }\n        }\n        \n        method.apply(this, args);\n      }\n    },\n     \n    /**\n     * Log a string into the console if it exists\n     *\n     * @param   string  The name of the option\n     * @return  mixed\n     */   \n     \n    log: function(str) {\n      if(window.console && console.log) {\n        console.log(str);\n      }\n    },\n     \n    /**\n     * Get an single option value. Returns false if option does not exist\n     *\n     * @param   string  The name of the option\n     * @return  mixed\n     */   \n     \n    getOption: function(index) {\n      if(this[index]) {\n        return this[index];\n      }\n      return false;\n    },\n    \n    /**\n     * Get all options\n     *\n     * @return  bool\n     */   \n     \n    getOptions: function() {\n      return this;\n    },\n    \n    /**\n     * Set a single option value\n     *\n     * @param   string  The name of the option\n     * @param   mixed   The value of the option\n     */   \n     \n    setOption: function(index, value) {\n      this[index] = value;\n    },\n    \n    /**\n     * Set a multiple options by passing a JSON object\n     *\n     * @param   object  The object with the options\n     * @param   mixed   The value of the option\n     */   \n    \n    setOptions: function(options) {\n      for(var key in options) {\n          if(typeof options[key] !== \"undefined\") {\n            this.setOption(key, options[key]);\n          }\n        }\n    }\n    \n  });\n  \n}(jQuery));\n\n/*jshint smarttabs:true */\n\n/**\n * FlipClock.js\n *\n * @author     Justin Kimbrell\n * @copyright  2013 - Objective HTML, LLC\n * @licesnse   http://www.opensource.org/licenses/mit-license.php\n */\n  \n(function($) {\n  \n  \"use strict\";\n  \n  /**\n   * The FlipClock Face class is the base class in which to extend\n   * all other FlockClock.Face classes.\n   *\n   * @param   object  The parent FlipClock.Factory object\n   * @param   object  An object of properties to override the default \n   */\n   \n  FlipClock.Face = FlipClock.Base.extend({\n    \n    /**\n     * Sets whether or not the clock should start upon instantiation\n     */\n     \n    autoStart: true,\n\n    /**\n     * An array of jQuery objects used for the dividers (the colons)\n     */\n     \n    dividers: [],\n\n    /**\n     * An array of FlipClock.List objects\n     */   \n     \n    factory: false,\n    \n    /**\n     * An array of FlipClock.List objects\n     */   \n     \n    lists: [],\n\n    /**\n     * Constructor\n     *\n     * @param   object  The parent FlipClock.Factory object\n     * @param   object  An object of properties to override the default \n     */\n     \n    constructor: function(factory, options) {\n      this.dividers = [];\n      this.lists = [];\n      this.base(options);\n      this.factory = factory;\n    },\n    \n    /**\n     * Build the clock face\n     */\n     \n    build: function() {\n      if(this.autoStart) {\n        this.start();\n      }\n    },\n    \n    /**\n     * Creates a jQuery object used for the digit divider\n     *\n     * @param mixed   The divider label text\n     * @param mixed Set true to exclude the dots in the divider. \n     *          If not set, is false.\n     */\n     \n    createDivider: function(label, css, excludeDots) {\n      if(typeof css == \"boolean\" || !css) {\n        excludeDots = css;\n        css = label;\n      }\n\n      var dots = [\n        '<span class=\"'+this.factory.classes.dot+' top\"></span>',\n        '<span class=\"'+this.factory.classes.dot+' bottom\"></span>'\n      ].join('');\n\n      if(excludeDots) {\n        dots = '';  \n      }\n\n      label = this.factory.localize(label);\n\n      var html = [\n        '<span class=\"'+this.factory.classes.divider+' '+(css ? css : '').toLowerCase()+'\">',\n          '<span class=\"'+this.factory.classes.label+'\">'+(label ? label : '')+'</span>',\n          dots,\n        '</span>'\n      ];  \n      \n      var $html = $(html.join(''));\n\n      this.dividers.push($html);\n\n      return $html;\n    },\n    \n    /**\n     * Creates a FlipClock.List object and appends it to the DOM\n     *\n     * @param mixed   The digit to select in the list\n     * @param object  An object to override the default properties\n     */\n     \n    createList: function(digit, options) {\n      if(typeof digit === \"object\") {\n        options = digit;\n        digit = 0;\n      }\n\n      var obj = new FlipClock.List(this.factory, digit, options);\n    \n      this.lists.push(obj);\n\n      return obj;\n    },\n    \n    /**\n     * Triggers when the clock is reset\n     */\n\n    reset: function() {\n      this.factory.time = new FlipClock.Time(\n        this.factory, \n        this.factory.original ? Math.round(this.factory.original) : 0,\n        {\n          minimumDigits: this.factory.minimumDigits\n        }\n      );\n\n      this.flip(this.factory.original, false);\n    },\n\n    /**\n     * Append a newly created list to the clock\n     */\n\n    appendDigitToClock: function(obj) {\n      obj.$el.append(false);\n    },\n\n    /**\n     * Add a digit to the clock face\n     */\n     \n    addDigit: function(digit) {\n      var obj = this.createList(digit, {\n        classes: {\n          active: this.factory.classes.active,\n          before: this.factory.classes.before,\n          flip: this.factory.classes.flip\n        }\n      });\n\n      this.appendDigitToClock(obj);\n    },\n    \n    /**\n     * Triggers when the clock is started\n     */\n     \n    start: function() {},\n    \n    /**\n     * Triggers when the time on the clock stops\n     */\n     \n    stop: function() {},\n    \n    /**\n     * Auto increments/decrements the value of the clock face\n     */\n     \n    autoIncrement: function() {\n      if(!this.factory.countdown) {\n        this.increment();\n      }\n      else {\n        this.decrement();\n      }\n    },\n\n    /**\n     * Increments the value of the clock face\n     */\n     \n    increment: function() {\n      this.factory.time.addSecond();\n    },\n\n    /**\n     * Decrements the value of the clock face\n     */\n\n    decrement: function() {\n      if(this.factory.time.getTimeSeconds() == 0) {\n            this.factory.stop()\n      }\n      else {\n        this.factory.time.subSecond();\n      }\n    },\n      \n    /**\n     * Triggers when the numbers on the clock flip\n     */\n     \n    flip: function(time, doNotAddPlayClass) {\n      var t = this;\n\n      $.each(time, function(i, digit) {\n        var list = t.lists[i];\n\n        if(list) {\n          if(!doNotAddPlayClass && digit != list.digit) {\n            list.play();  \n          }\n\n          list.select(digit);\n        } \n        else {\n          t.addDigit(digit);\n        }\n      });\n    }\n          \n  });\n  \n}(jQuery));\n\n/*jshint smarttabs:true */\n\n/**\n * FlipClock.js\n *\n * @author     Justin Kimbrell\n * @copyright  2013 - Objective HTML, LLC\n * @licesnse   http://www.opensource.org/licenses/mit-license.php\n */\n  \n(function($) {\n  \n  \"use strict\";\n  \n  /**\n   * The FlipClock Factory class is used to build the clock and manage\n   * all the public methods.\n   *\n   * @param   object  A jQuery object or CSS selector used to fetch\n              the wrapping DOM nodes\n   * @param   mixed   This is the digit used to set the clock. If an \n              object is passed, 0 will be used. \n   * @param   object  An object of properties to override the default \n   */\n    \n  FlipClock.Factory = FlipClock.Base.extend({\n    \n    /**\n     * The clock's animation rate.\n     * \n     * Note, currently this property doesn't do anything.\n     * This property is here to be used in the future to\n     * programmaticaly set the clock's animation speed\n     */   \n\n    animationRate: 1000,\n\n    /**\n     * Auto start the clock on page load (True|False)\n     */ \n     \n    autoStart: true,\n    \n    /**\n     * The callback methods\n     */   \n     \n    callbacks: {\n      destroy: false,\n      create: false,\n      init: false,\n      interval: false,\n      start: false,\n      stop: false,\n      reset: false\n    },\n    \n    /**\n     * The CSS classes\n     */   \n     \n    classes: {\n      active: 'flip-clock-active',\n      before: 'flip-clock-before',\n      divider: 'flip-clock-divider',\n      dot: 'flip-clock-dot',\n      label: 'flip-clock-label',\n      flip: 'flip',\n      play: 'play',\n      wrapper: 'flip-clock-wrapper'\n    },\n    \n    /**\n     * The name of the clock face class in use\n     */ \n     \n    clockFace: 'HourlyCounter',\n     \n    /**\n     * The name of the clock face class in use\n     */ \n     \n    countdown: false,\n     \n    /**\n     * The name of the default clock face class to use if the defined\n     * clockFace variable is not a valid FlipClock.Face object\n     */ \n     \n    defaultClockFace: 'HourlyCounter',\n     \n    /**\n     * The default language\n     */ \n     \n    defaultLanguage: 'english',\n     \n    /**\n     * The jQuery object\n     */   \n     \n    $el: false,\n\n    /**\n     * The FlipClock.Face object\n     */ \n     \n    face: true,\n     \n    /**\n     * The language object after it has been loaded\n     */ \n     \n    lang: false,\n     \n    /**\n     * The language being used to display labels (string)\n     */ \n     \n    language: 'english',\n     \n    /**\n     * The minimum digits the clock must have\n     */   \n\n    minimumDigits: 0,\n\n    /**\n     * The original starting value of the clock. Used for the reset method.\n     */   \n     \n    original: false,\n    \n    /**\n     * Is the clock running? (True|False)\n     */   \n     \n    running: false,\n    \n    /**\n     * The FlipClock.Time object\n     */   \n     \n    time: false,\n    \n    /**\n     * The FlipClock.Timer object\n     */   \n     \n    timer: false,\n    \n    /**\n     * The jQuery object (depcrecated)\n     */   \n     \n    $wrapper: false,\n    \n    /**\n     * Constructor\n     *\n     * @param   object  The wrapping jQuery object\n     * @param object  Number of seconds used to start the clock\n     * @param object  An object override options\n     */\n     \n    constructor: function(obj, digit, options) {\n\n      if(!options) {\n        options = {};\n      }\n\n      this.lists = [];\n      this.running = false;\n      this.base(options); \n\n      this.$el = $(obj).addClass(this.classes.wrapper);\n\n      // Depcrated support of the $wrapper property.\n      this.$wrapper = this.$el;\n\n      this.original = (digit instanceof Date) ? digit : (digit ? Math.round(digit) : 0);\n\n      this.time = new FlipClock.Time(this, this.original, {\n        minimumDigits: this.minimumDigits,\n        animationRate: this.animationRate \n      });\n\n      this.timer = new FlipClock.Timer(this, options);\n\n      this.loadLanguage(this.language);\n      \n      this.loadClockFace(this.clockFace, options);\n\n      if(this.autoStart) {\n        this.start();\n      }\n\n    },\n    \n    /**\n     * Load the FlipClock.Face object\n     *\n     * @param object  The name of the FlickClock.Face class\n     * @param object  An object override options\n     */\n     \n    loadClockFace: function(name, options) {  \n      var face, suffix = 'Face', hasStopped = false;\n      \n      name = name.ucfirst()+suffix;\n\n      if(this.face.stop) {\n        this.stop();\n        hasStopped = true;\n      }\n\n      this.$el.html('');\n\n      this.time.minimumDigits = this.minimumDigits;\n      \n      if(FlipClock[name]) {\n        face = new FlipClock[name](this, options);\n      }\n      else {\n        face = new FlipClock[this.defaultClockFace+suffix](this, options);\n      }\n      \n      face.build();\n\n      this.face = face\n\n      if(hasStopped) {\n        this.start();\n      }\n      \n      return this.face;\n    },\n        \n    /**\n     * Load the FlipClock.Lang object\n     *\n     * @param object  The name of the language to load\n     */\n     \n    loadLanguage: function(name) {  \n      var lang;\n      \n      if(FlipClock.Lang[name.ucfirst()]) {\n        lang = FlipClock.Lang[name.ucfirst()];\n      }\n      else if(FlipClock.Lang[name]) {\n        lang = FlipClock.Lang[name];\n      }\n      else {\n        lang = FlipClock.Lang[this.defaultLanguage];\n      }\n      \n      return this.lang = lang;\n    },\n          \n    /**\n     * Localize strings into various languages\n     *\n     * @param string  The index of the localized string\n     * @param object  Optionally pass a lang object\n     */\n\n    localize: function(index, obj) {\n      var lang = this.lang;\n\n      if(!index) {\n        return null;\n      }\n\n      var lindex = index.toLowerCase();\n\n      if(typeof obj == \"object\") {\n        lang = obj;\n      }\n\n      if(lang && lang[lindex]) {\n        return lang[lindex];\n      }\n\n      return index;\n    },\n     \n\n    /**\n     * Starts the clock\n     */\n     \n    start: function(callback) {\n      var t = this;\n\n      if(!t.running && (!t.countdown || t.countdown && t.time.time > 0)) {\n        t.face.start(t.time);\n        t.timer.start(function() {\n          t.flip();\n          \n          if(typeof callback === \"function\") {\n            callback();\n          } \n        });\n      }\n      else {\n        t.log('Trying to start timer when countdown already at 0');\n      }\n    },\n    \n    /**\n     * Stops the clock\n     */\n     \n    stop: function(callback) {\n      this.face.stop();\n      this.timer.stop(callback);\n      \n      for(var x in this.lists) {\n        if (this.lists.hasOwnProperty(x)) {\n          this.lists[x].stop();\n        }\n      } \n    },\n    \n    /**\n     * Reset the clock\n     */\n     \n    reset: function(callback) {\n      this.timer.reset(callback);\n      this.face.reset();\n    },\n    \n    /**\n     * Sets the clock time\n     */\n     \n    setTime: function(time) {\n      this.time.time = time;\n      this.flip(true);    \n    },\n    \n    /**\n     * Get the clock time\n     *\n     * @return  object  Returns a FlipClock.Time object\n     */\n     \n    getTime: function(time) {\n      return this.time;   \n    },\n    \n    /**\n     * Changes the increment of time to up or down (add/sub)\n     */\n     \n    setCountdown: function(value) {\n      var running = this.running;\n      \n      this.countdown = value ? true : false;\n        \n      if(running) {\n        this.stop();\n        this.start();\n      }\n    },\n    \n    /**\n     * Flip the digits on the clock\n     *\n     * @param  array  An array of digits   \n     */\n    flip: function(doNotAddPlayClass) { \n      this.face.flip(false, doNotAddPlayClass);\n    }\n    \n  });\n    \n}(jQuery));\n\n/*jshint smarttabs:true */\n\n/**\n * FlipClock.js\n *\n * @author     Justin Kimbrell\n * @copyright  2013 - Objective HTML, LLC\n * @licesnse   http://www.opensource.org/licenses/mit-license.php\n */\n  \n(function($) {\n  \n  \"use strict\";\n  \n  /**\n   * The FlipClock List class is used to build the list used to create \n   * the card flip effect. This object fascilates selecting the correct\n   * node by passing a specific digit.\n   *\n   * @param   object  A FlipClock.Factory object\n   * @param   mixed   This is the digit used to set the clock. If an \n   *            object is passed, 0 will be used. \n   * @param   object  An object of properties to override the default \n   */\n    \n  FlipClock.List = FlipClock.Base.extend({\n    \n    /**\n     * The digit (0-9)\n     */   \n     \n    digit: 0,\n    \n    /**\n     * The CSS classes\n     */   \n     \n    classes: {\n      active: 'flip-clock-active',\n      before: 'flip-clock-before',\n      flip: 'flip'  \n    },\n        \n    /**\n     * The parent FlipClock.Factory object\n     */   \n     \n    factory: false,\n    \n    /**\n     * The jQuery object\n     */   \n     \n    $el: false,\n\n    /**\n     * The jQuery object (deprecated)\n     */   \n     \n    $obj: false,\n    \n    /**\n     * The items in the list\n     */   \n     \n    items: [],\n    \n    /**\n     * The last digit\n     */   \n     \n    lastDigit: 0,\n      \n    /**\n     * Constructor\n     *\n     * @param  object  A FlipClock.Factory object\n     * @param  int     An integer use to select the correct digit\n     * @param  object  An object to override the default properties  \n     */\n     \n    constructor: function(factory, digit, options) {\n      this.factory = factory;\n      this.digit = digit;\n      this.lastDigit = digit;\n      this.$el = this.createList();\n      \n      // Depcrated support of the $obj property.\n      this.$obj = this.$el;\n\n      if(digit > 0) {\n        this.select(digit);\n      }\n\n      this.factory.$el.append(this.$el);\n    },\n    \n    /**\n     * Select the digit in the list\n     *\n     * @param  int  A digit 0-9  \n     */\n     \n    select: function(digit) {\n      if(typeof digit === \"undefined\") {\n        digit = this.digit;\n      }\n      else {\n        this.digit = digit;\n      }\n\n      if(this.digit != this.lastDigit) {\n        var $delete = this.$el.find('.'+this.classes.before).removeClass(this.classes.before);\n\n        this.$el.find('.'+this.classes.active).removeClass(this.classes.active)\n                            .addClass(this.classes.before);\n\n        this.appendListItem(this.classes.active, this.digit);\n\n        $delete.remove();\n\n        this.lastDigit = this.digit;\n      } \n    },\n    \n    /**\n     * Adds the play class to the DOM object\n     */\n        \n    play: function() {\n      this.$el.addClass(this.factory.classes.play);\n    },\n    \n    /**\n     * Removes the play class to the DOM object \n     */\n     \n    stop: function() {\n      var t = this;\n\n      setTimeout(function() {\n        t.$el.removeClass(t.factory.classes.play);\n      }, this.factory.timer.interval);\n    },\n    \n    /**\n     * Creates the list item HTML and returns as a string \n     */\n     \n    createListItem: function(css, value) {\n      return [\n        '<li class=\"'+(css ? css : '')+'\">',\n          '<a href=\"#\">',\n            '<div class=\"up\">',\n              '<div class=\"shadow\"></div>',\n              '<div class=\"inn\">'+(value ? value : '')+'</div>',\n            '</div>',\n            '<div class=\"down\">',\n              '<div class=\"shadow\"></div>',\n              '<div class=\"inn\">'+(value ? value : '')+'</div>',\n            '</div>',\n          '</a>',\n        '</li>'\n      ].join('');\n    },\n\n    /**\n     * Append the list item to the parent DOM node \n     */\n\n    appendListItem: function(css, value) {\n      var html = this.createListItem(css, value);\n\n      this.$el.append(html);\n    },\n\n    /**\n     * Create the list of digits and appends it to the DOM object \n     */\n     \n    createList: function() {\n\n      var lastDigit = this.getPrevDigit() ? this.getPrevDigit() : this.digit;\n\n      var html = $([\n        '<ul class=\"'+this.classes.flip+' '+(this.factory.running ? this.factory.classes.play : '')+'\">',\n          this.createListItem(this.classes.before, lastDigit),\n          this.createListItem(this.classes.active, this.digit),\n        '</ul>'\n      ].join(''));\n          \n      return html;\n    },\n\n    getNextDigit: function() {\n      return this.digit == 9 ? 0 : this.digit + 1;\n    },\n\n    getPrevDigit: function() {\n      return this.digit == 0 ? 9 : this.digit - 1;\n    }\n\n  });\n  \n  \n}(jQuery));\n\n/*jshint smarttabs:true */\n\n/**\n * FlipClock.js\n *\n * @author     Justin Kimbrell\n * @copyright  2013 - Objective HTML, LLC\n * @licesnse   http://www.opensource.org/licenses/mit-license.php\n */\n  \n(function($) {\n  \n  \"use strict\";\n  \n  /**\n   * Capitalize the first letter in a string\n   *\n   * @return string\n   */\n   \n  String.prototype.ucfirst = function() {\n    return this.substr(0, 1).toUpperCase() + this.substr(1);\n  };\n  \n  /**\n   * jQuery helper method\n   *\n   * @param  int     An integer used to start the clock (no. seconds)\n   * @param  object  An object of properties to override the default  \n   */\n   \n  $.fn.FlipClock = function(digit, options) { \n    return new FlipClock($(this), digit, options);\n  };\n  \n  /**\n   * jQuery helper method\n   *\n   * @param  int     An integer used to start the clock (no. seconds)\n   * @param  object  An object of properties to override the default  \n   */\n   \n  $.fn.flipClock = function(digit, options) {\n    return $.fn.FlipClock(digit, options);\n  };\n  \n}(jQuery));\n\n/*jshint smarttabs:true */\n\n/**\n * FlipClock.js\n *\n * @author     Justin Kimbrell\n * @copyright  2013 - Objective HTML, LLC\n * @licesnse   http://www.opensource.org/licenses/mit-license.php\n */\n  \n(function($) {\n  \n  \"use strict\";\n      \n  /**\n   * The FlipClock Time class is used to manage all the time \n   * calculations.\n   *\n   * @param   object  A FlipClock.Factory object\n   * @param   mixed   This is the digit used to set the clock. If an \n   *            object is passed, 0 will be used. \n   * @param   object  An object of properties to override the default \n   */\n    \n  FlipClock.Time = FlipClock.Base.extend({\n    \n    /**\n     * The time (in seconds) or a date object\n     */   \n     \n    time: 0,\n    \n    /**\n     * The parent FlipClock.Factory object\n     */   \n     \n    factory: false,\n    \n    /**\n     * The minimum number of digits the clock face must have\n     */   \n     \n    minimumDigits: 0,\n\n    /**\n     * Constructor\n     *\n     * @param  object  A FlipClock.Factory object\n     * @param  int     An integer use to select the correct digit\n     * @param  object  An object to override the default properties  \n     */\n     \n    constructor: function(factory, time, options) {\n      if(typeof options != \"object\") {\n        options = {};\n      }\n\n      if(!options.minimumDigits) {\n        options.minimumDigits = factory.minimumDigits;\n      }\n\n      this.base(options);\n      this.factory = factory;\n\n      if(time) {\n        this.time = time;\n      }\n    },\n\n    /**\n     * Convert a string or integer to an array of digits\n     *\n     * @param   mixed  String or Integer of digits   \n     * @return  array  An array of digits \n     */\n     \n    convertDigitsToArray: function(str) {\n      var data = [];\n      \n      str = str.toString();\n      \n      for(var x = 0;x < str.length; x++) {\n        if(str[x].match(/^\\d*$/g)) {\n          data.push(str[x]);  \n        }\n      }\n      \n      return data;\n    },\n    \n    /**\n     * Get a specific digit from the time integer\n     *\n     * @param   int    The specific digit to select from the time  \n     * @return  mixed  Returns FALSE if no digit is found, otherwise\n     *           the method returns the defined digit  \n     */\n     \n    digit: function(i) {\n      var timeStr = this.toString();\n      var length  = timeStr.length;\n      \n      if(timeStr[length - i])  {\n        return timeStr[length - i];\n      }\n      \n      return false;\n    },\n\n    /**\n     * Formats any array of digits into a valid array of digits\n     *\n     * @param   mixed  An array of digits  \n     * @return  array  An array of digits \n     */\n     \n    digitize: function(obj) {\n      var data = [];\n\n      $.each(obj, function(i, value) {\n        value = value.toString();\n        \n        if(value.length == 1) {\n          value = '0'+value;\n        }\n        \n        for(var x = 0; x < value.length; x++) {\n          data.push(value.charAt(x));\n        }       \n      });\n\n      if(data.length > this.minimumDigits) {\n        this.minimumDigits = data.length;\n      }\n      \n      if(this.minimumDigits > data.length) {\n        for(var x = data.length; x < this.minimumDigits; x++) {\n          data.unshift('0');\n        }\n      }\n\n      return data;\n    },\n    \n    /**\n     * Gets a new Date object for the current time\n     *\n     * @return  array  Returns a Date object\n     */\n\n    getDateObject: function() {\n      if(this.time instanceof Date) {\n        return this.time;\n      }\n\n      return new Date((new Date()).getTime() + this.getTimeSeconds() * 1000);\n    },\n    \n    /**\n     * Gets a digitized daily counter\n     *\n     * @return  object  Returns a digitized object\n     */\n\n    getDayCounter: function(includeSeconds) {\n      var digits = [\n        this.getDays(),\n        this.getHours(true),\n        this.getMinutes(true)\n      ];\n\n      if(includeSeconds) {\n        digits.push(this.getSeconds(true));\n      }\n\n      return this.digitize(digits);\n    },\n\n    /**\n     * Gets number of days\n     *\n     * @param   bool  Should perform a modulus? If not sent, then no.\n     * @return  int   Retuns a floored integer\n     */\n     \n    getDays: function(mod) {\n      var days = this.getTimeSeconds() / 60 / 60 / 24;\n      \n      if(mod) {\n        days = days % 7;\n      }\n      \n      return Math.floor(days);\n    },\n    \n    /**\n     * Gets an hourly breakdown\n     *\n     * @return  object  Returns a digitized object\n     */\n     \n    getHourCounter: function() {\n      var obj = this.digitize([\n        this.getHours(),\n        this.getMinutes(true),\n        this.getSeconds(true)\n      ]);\n      \n      return obj;\n    },\n    \n    /**\n     * Gets an hourly breakdown\n     *\n     * @return  object  Returns a digitized object\n     */\n     \n    getHourly: function() {\n      return this.getHourCounter();\n    },\n    \n    /**\n     * Gets number of hours\n     *\n     * @param   bool  Should perform a modulus? If not sent, then no.\n     * @return  int   Retuns a floored integer\n     */\n     \n    getHours: function(mod) {\n      var hours = this.getTimeSeconds() / 60 / 60;\n      \n      if(mod) {\n        hours = hours % 24; \n      }\n      \n      return Math.floor(hours);\n    },\n    \n    /**\n     * Gets the twenty-four hour time\n     *\n     * @return  object  returns a digitized object\n     */\n     \n    getMilitaryTime: function(date, showSeconds) {\n      if(typeof showSeconds === \"undefined\") {\n        showSeconds = true;\n      }\n\n      if(!date) {\n        date = this.getDateObject();\n      }\n\n      var data  = [\n        date.getHours(),\n        date.getMinutes()     \n      ];\n\n      if(showSeconds === true) {\n        data.push(date.getSeconds());\n      }\n\n      return this.digitize(data);\n    },\n        \n    /**\n     * Gets number of minutes\n     *\n     * @param   bool  Should perform a modulus? If not sent, then no.\n     * @return  int   Retuns a floored integer\n     */\n     \n    getMinutes: function(mod) {\n      var minutes = this.getTimeSeconds() / 60;\n      \n      if(mod) {\n        minutes = minutes % 60;\n      }\n      \n      return Math.floor(minutes);\n    },\n    \n    /**\n     * Gets a minute breakdown\n     */\n     \n    getMinuteCounter: function() {\n      var obj = this.digitize([\n        this.getMinutes(),\n        this.getSeconds(true)\n      ]);\n\n      return obj;\n    },\n    \n    /**\n     * Gets time count in seconds regardless of if targetting date or not.\n     *\n     * @return  int   Returns a floored integer\n     */\n     \n    getTimeSeconds: function(date) {\n      if(!date) {\n        date = new Date();\n      }\n\n      if (this.time instanceof Date) {\n        if (this.factory.countdown) {\n          return Math.max(this.time.getTime()/1000 - date.getTime()/1000,0);\n        } else {\n          return date.getTime()/1000 - this.time.getTime()/1000 ;\n        }\n      } else {\n        return this.time;\n      }\n    },\n    \n    /**\n     * Gets the current twelve hour time\n     *\n     * @return  object  Returns a digitized object\n     */\n     \n    getTime: function(date, showSeconds) {\n      if(typeof showSeconds === \"undefined\") {\n        showSeconds = true;\n      }\n\n      if(!date) {\n        date = this.getDateObject();\n      }\n\n      console.log(date);\n\n      \n      var hours = date.getHours();\n      var merid = hours > 12 ? 'PM' : 'AM';\n      var data   = [\n        hours > 12 ? hours - 12 : (hours === 0 ? 12 : hours),\n        date.getMinutes()     \n      ];\n\n      if(showSeconds === true) {\n        data.push(date.getSeconds());\n      }\n\n      return this.digitize(data);\n    },\n    \n    /**\n     * Gets number of seconds\n     *\n     * @param   bool  Should perform a modulus? If not sent, then no.\n     * @return  int   Retuns a ceiled integer\n     */\n     \n    getSeconds: function(mod) {\n      var seconds = this.getTimeSeconds();\n      \n      if(mod) {\n        if(seconds == 60) {\n          seconds = 0;\n        }\n        else {\n          seconds = seconds % 60;\n        }\n      }\n      \n      return Math.ceil(seconds);\n    },\n\n    /**\n     * Gets number of weeks\n     *\n     * @param   bool  Should perform a modulus? If not sent, then no.\n     * @return  int   Retuns a floored integer\n     */\n     \n    getWeeks: function(mod) {\n      var weeks = this.getTimeSeconds() / 60 / 60 / 24 / 7;\n      \n      if(mod) {\n        weeks = weeks % 52;\n      }\n      \n      return Math.floor(weeks);\n    },\n    \n    /**\n     * Removes a specific number of leading zeros from the array.\n     * This method prevents you from removing too many digits, even\n     * if you try.\n     *\n     * @param   int    Total number of digits to remove \n     * @return  array  An array of digits \n     */\n     \n    removeLeadingZeros: function(totalDigits, digits) {\n      var total    = 0;\n      var newArray = [];\n      \n      $.each(digits, function(i, digit) {\n        if(i < totalDigits) {\n          total += parseInt(digits[i], 10);\n        }\n        else {\n          newArray.push(digits[i]);\n        }\n      });\n      \n      if(total === 0) {\n        return newArray;\n      }\n      \n      return digits;\n    },\n\n    /**\n     * Adds X second to the current time\n     */\n\n    addSeconds: function(x) {\n      if(this.time instanceof Date) {\n        this.time.setSeconds(this.time.getSeconds() + x);\n      }\n      else {\n        this.time += x;\n      }\n    },\n\n    /**\n     * Adds 1 second to the current time\n     */\n\n    addSecond: function() {\n      this.addSeconds(1);\n    },\n\n    /**\n     * Substracts X seconds from the current time\n     */\n\n    subSeconds: function(x) {\n      if(this.time instanceof Date) {\n        this.time.setSeconds(this.time.getSeconds() - x);\n      }\n      else {\n        this.time -= x;\n      }\n    },\n\n    /**\n     * Substracts 1 second from the current time\n     */\n\n    subSecond: function() {\n      this.subSeconds(1);\n    },\n    \n    /**\n     * Converts the object to a human readable string\n     */\n     \n    toString: function() {\n      return this.getTimeSeconds().toString();\n    }\n    \n    /*\n    getYears: function() {\n      return Math.floor(this.time / 60 / 60 / 24 / 7 / 52);\n    },\n    \n    getDecades: function() {\n      return Math.floor(this.getWeeks() / 10);\n    }*/\n  });\n  \n}(jQuery));\n\n/*jshint smarttabs:true */\n\n/**\n * FlipClock.js\n *\n * @author     Justin Kimbrell\n * @copyright  2013 - Objective HTML, LLC\n * @licesnse   http://www.opensource.org/licenses/mit-license.php\n */\n  \n(function($) {\n  \n  \"use strict\";\n  \n  /**\n   * The FlipClock.Timer object managers the JS timers\n   *\n   * @param object  The parent FlipClock.Factory object\n   * @param object  Override the default options\n   */\n  \n  FlipClock.Timer = FlipClock.Base.extend({\n    \n    /**\n     * Callbacks\n     */   \n     \n    callbacks: {\n      destroy: false,\n      create: false,\n      init: false,\n      interval: false,\n      start: false,\n      stop: false,\n      reset: false\n    },\n    \n    /**\n     * FlipClock timer count (how many intervals have passed)\n     */   \n     \n    count: 0,\n    \n    /**\n     * The parent FlipClock.Factory object\n     */   \n     \n    factory: false,\n    \n    /**\n     * Timer interval (1 second by default)\n     */   \n     \n    interval: 1000,\n\n    /**\n     * The rate of the animation in milliseconds (not currently in use)\n     */   \n     \n    animationRate: 1000,\n        \n    /**\n     * Constructor\n     *\n     * @return  void\n     */   \n     \n    constructor: function(factory, options) {\n      this.base(options);\n      this.factory = factory;\n      this.callback(this.callbacks.init); \n      this.callback(this.callbacks.create);\n    },\n    \n    /**\n     * This method gets the elapsed the time as an interger\n     *\n     * @return  void\n     */   \n     \n    getElapsed: function() {\n      return this.count * this.interval;\n    },\n    \n    /**\n     * This method gets the elapsed the time as a Date object\n     *\n     * @return  void\n     */   \n     \n    getElapsedTime: function() {\n      return new Date(this.time + this.getElapsed());\n    },\n    \n    /**\n     * This method is resets the timer\n     *\n     * @param   callback  This method resets the timer back to 0\n     * @return  void\n     */   \n     \n    reset: function(callback) {\n      clearInterval(this.timer);\n      this.count = 0;\n      this._setInterval(callback);      \n      this.callback(this.callbacks.reset);\n    },\n    \n    /**\n     * This method is starts the timer\n     *\n     * @param   callback  A function that is called once the timer is destroyed\n     * @return  void\n     */   \n     \n    start: function(callback) {   \n      this.factory.running = true;\n      this._createTimer(callback);\n      this.callback(this.callbacks.start);\n    },\n    \n    /**\n     * This method is stops the timer\n     *\n     * @param   callback  A function that is called once the timer is destroyed\n     * @return  void\n     */   \n     \n    stop: function(callback) {\n      this.factory.running = false;\n      this._clearInterval(callback);\n      this.callback(this.callbacks.stop);\n      this.callback(callback);\n    },\n    \n    /**\n     * Clear the timer interval\n     *\n     * @return  void\n     */   \n     \n    _clearInterval: function() {\n      clearInterval(this.timer);\n    },\n    \n    /**\n     * Create the timer object\n     *\n     * @param   callback  A function that is called once the timer is created\n     * @return  void\n     */   \n     \n    _createTimer: function(callback) {\n      this._setInterval(callback);    \n    },\n    \n    /**\n     * Destroy the timer object\n     *\n     * @param   callback  A function that is called once the timer is destroyed\n     * @return  void\n     */   \n      \n    _destroyTimer: function(callback) {\n      this._clearInterval();      \n      this.timer = false;\n      this.callback(callback);\n      this.callback(this.callbacks.destroy);\n    },\n    \n    /**\n     * This method is called each time the timer interval is ran\n     *\n     * @param   callback  A function that is called once the timer is destroyed\n     * @return  void\n     */   \n     \n    _interval: function(callback) {\n      this.callback(this.callbacks.interval);\n      this.callback(callback);\n      this.count++;\n    },\n    \n    /**\n     * This sets the timer interval\n     *\n     * @param   callback  A function that is called once the timer is destroyed\n     * @return  void\n     */   \n     \n    _setInterval: function(callback) {\n      var t = this;\n  \n      t._interval(callback);\n\n      t.timer = setInterval(function() {    \n        t._interval(callback);\n      }, this.interval);\n    }\n      \n  });\n  \n}(jQuery));\n\n(function($) {\n  \n  /**\n   * Twenty-Four Hour Clock Face\n   *\n   * This class will generate a twenty-four our clock for FlipClock.js\n   *\n   * @param  object  The parent FlipClock.Factory object\n   * @param  object  An object of properties to override the default  \n   */\n   \n  FlipClock.TwentyFourHourClockFace = FlipClock.Face.extend({\n\n    /**\n     * Constructor\n     *\n     * @param  object  The parent FlipClock.Factory object\n     * @param  object  An object of properties to override the default  \n     */\n     \n    constructor: function(factory, options) {\n      this.base(factory, options);\n    },\n\n    /**\n     * Build the clock face\n     *\n     * @param  object  Pass the time that should be used to display on the clock. \n     */\n     \n    build: function(time) {\n      var t        = this;\n      var children = this.factory.$el.find('ul');\n\n      if(!this.factory.time.time) {\n        this.factory.original = new Date();\n\n        this.factory.time = new FlipClock.Time(this.factory, this.factory.original);\n      }\n\n      var time = time ? time : this.factory.time.getMilitaryTime(false, this.showSeconds);\n\n      if(time.length > children.length) {\n        $.each(time, function(i, digit) {\n          t.createList(digit);\n        });\n      }\n      \n      this.createDivider();\n      this.createDivider();\n\n      $(this.dividers[0]).insertBefore(this.lists[this.lists.length - 2].$el);\n      $(this.dividers[1]).insertBefore(this.lists[this.lists.length - 4].$el);\n      \n      this.base();\n    },\n    \n    /**\n     * Flip the clock face\n     */\n     \n    flip: function(time, doNotAddPlayClass) {\n      this.autoIncrement();\n      \n      time = time ? time : this.factory.time.getMilitaryTime(false, this.showSeconds);\n      \n      this.base(time, doNotAddPlayClass); \n    }\n        \n  });\n  \n}(jQuery));\n(function($) {\n    \n  /**\n   * Counter Clock Face\n   *\n   * This class will generate a generice flip counter. The timer has been\n   * disabled. clock.increment() and clock.decrement() have been added.\n   *\n   * @param  object  The parent FlipClock.Factory object\n   * @param  object  An object of properties to override the default  \n   */\n   \n  FlipClock.CounterFace = FlipClock.Face.extend({\n    \n    /**\n     * Tells the counter clock face if it should auto-increment\n     */\n\n    shouldAutoIncrement: false,\n\n    /**\n     * Constructor\n     *\n     * @param  object  The parent FlipClock.Factory object\n     * @param  object  An object of properties to override the default  \n     */\n     \n    constructor: function(factory, options) {\n\n      if(typeof options != \"object\") {\n        options = {};\n      }\n\n      factory.autoStart = options.autoStart ? true : false;\n\n      if(options.autoStart) {\n        this.shouldAutoIncrement = true;\n      }\n\n      factory.increment = function() {\n        factory.countdown = false;\n        factory.setTime(factory.getTime().getTimeSeconds() + 1);\n      };\n\n      factory.decrement = function() {\n        factory.countdown = true;\n        var time = factory.getTime().getTimeSeconds();\n        if(time > 0) {\n          factory.setTime(time - 1);\n        }\n      };\n\n      factory.setValue = function(digits) {\n        factory.setTime(digits);\n      };\n\n      factory.setCounter = function(digits) {\n        factory.setTime(digits);\n      };\n\n      this.base(factory, options);\n    },\n\n    /**\n     * Build the clock face \n     */\n     \n    build: function() {\n      var t        = this;\n      var children = this.factory.$el.find('ul');\n      var time   = this.factory.getTime().digitize([this.factory.getTime().time]);\n\n      if(time.length > children.length) {\n        $.each(time, function(i, digit) {\n          var list = t.createList(digit);\n\n          list.select(digit);\n        });\n      \n      }\n\n      $.each(this.lists, function(i, list) {\n        list.play();\n      });\n\n      this.base();\n    },\n    \n    /**\n     * Flip the clock face\n     */\n     \n    flip: function(time, doNotAddPlayClass) {     \n      if(this.shouldAutoIncrement) {\n        this.autoIncrement();\n      }\n\n      if(!time) {   \n        time = this.factory.getTime().digitize([this.factory.getTime().time]);\n      }\n\n      this.base(time, doNotAddPlayClass);\n    },\n\n    /**\n     * Reset the clock face\n     */\n\n    reset: function() {\n      this.factory.time = new FlipClock.Time(\n        this.factory, \n        this.factory.original ? Math.round(this.factory.original) : 0\n      );\n\n      this.flip();\n    }\n  });\n  \n}(jQuery));\n(function($) {\n\n  /**\n   * Daily Counter Clock Face\n   *\n   * This class will generate a daily counter for FlipClock.js. A\n   * daily counter will track days, hours, minutes, and seconds. If\n   * the number of available digits is exceeded in the count, a new\n   * digit will be created.\n   *\n   * @param  object  The parent FlipClock.Factory object\n   * @param  object  An object of properties to override the default\n   */\n\n  FlipClock.DailyCounterFace = FlipClock.Face.extend({\n\n    showSeconds: true,\n\n    /**\n     * Constructor\n     *\n     * @param  object  The parent FlipClock.Factory object\n     * @param  object  An object of properties to override the default\n     */\n\n    constructor: function(factory, options) {\n      this.base(factory, options);\n    },\n\n    /**\n     * Build the clock face\n     */\n\n    build: function(time) {\n      var t = this;\n      var children = this.factory.$el.find('ul');\n      var offset = 0;\n\n      time = time ? time : this.factory.time.getDayCounter(this.showSeconds);\n\n      if(time.length > children.length) {\n        $.each(time, function(i, digit) {\n          t.createList(digit);\n        });\n      }\n\n      if(this.showSeconds) {\n        $(this.createDivider('Seconds')).insertBefore(this.lists[this.lists.length - 2].$el);\n      }\n      else\n      {\n        offset = 2;\n      }\n\n      $(this.createDivider('Minutes')).insertBefore(this.lists[this.lists.length - 4 + offset].$el);\n      $(this.createDivider('Hours')).insertBefore(this.lists[this.lists.length - 6 + offset].$el);\n      $(this.createDivider('Days', true)).insertBefore(this.lists[0].$el);\n\n      this.base();\n    },\n\n    /**\n     * Flip the clock face\n     */\n\n    flip: function(time, doNotAddPlayClass) {\n      if(!time) {\n        time = this.factory.time.getDayCounter(this.showSeconds);\n      }\n\n      this.autoIncrement();\n\n      this.base(time, doNotAddPlayClass);\n    }\n\n  });\n\n}(jQuery));\n(function($) {\n      \n  /**\n   * Hourly Counter Clock Face\n   *\n   * This class will generate an hourly counter for FlipClock.js. An\n   * hour counter will track hours, minutes, and seconds. If number of\n   * available digits is exceeded in the count, a new digit will be \n   * created.\n   *\n   * @param  object  The parent FlipClock.Factory object\n   * @param  object  An object of properties to override the default  \n   */\n   \n  FlipClock.HourlyCounterFace = FlipClock.Face.extend({\n      \n    // clearExcessDigits: true,\n\n    /**\n     * Constructor\n     *\n     * @param  object  The parent FlipClock.Factory object\n     * @param  object  An object of properties to override the default  \n     */\n     \n    constructor: function(factory, options) {\n      this.base(factory, options);\n    },\n    \n    /**\n     * Build the clock face\n     */\n    \n    build: function(excludeHours, time) {\n      var t = this;\n      var children = this.factory.$el.find('ul');\n      \n      time = time ? time : this.factory.time.getHourCounter();\n      \n      if(time.length > children.length) {\n        $.each(time, function(i, digit) {\n          t.createList(digit);\n        });\n      }\n      \n      $(this.createDivider('Seconds')).insertBefore(this.lists[this.lists.length - 2].$el);\n      $(this.createDivider('Minutes')).insertBefore(this.lists[this.lists.length - 4].$el);\n      \n      if(!excludeHours) {\n        $(this.createDivider('Hours', true)).insertBefore(this.lists[0].$el);\n      }\n      \n      this.base();\n    },\n    \n    /**\n     * Flip the clock face\n     */\n     \n    flip: function(time, doNotAddPlayClass) {\n      if(!time) {\n        time = this.factory.time.getHourCounter();\n      } \n\n      this.autoIncrement();\n    \n      this.base(time, doNotAddPlayClass);\n    },\n\n    /**\n     * Append a newly created list to the clock\n     */\n\n    appendDigitToClock: function(obj) {\n      this.base(obj);\n\n      this.dividers[0].insertAfter(this.dividers[0].next());\n    }\n    \n  });\n  \n}(jQuery));\n(function($) {\n    \n  /**\n   * Minute Counter Clock Face\n   *\n   * This class will generate a minute counter for FlipClock.js. A\n   * minute counter will track minutes and seconds. If an hour is \n   * reached, the counter will reset back to 0. (4 digits max)\n   *\n   * @param  object  The parent FlipClock.Factory object\n   * @param  object  An object of properties to override the default  \n   */\n   \n  FlipClock.MinuteCounterFace = FlipClock.HourlyCounterFace.extend({\n\n    clearExcessDigits: false,\n\n    /**\n     * Constructor\n     *\n     * @param  object  The parent FlipClock.Factory object\n     * @param  object  An object of properties to override the default  \n     */\n     \n    constructor: function(factory, options) {\n      this.base(factory, options);\n    },\n    \n    /**\n     * Build the clock face \n     */\n     \n    build: function() {\n      this.base(true, this.factory.time.getMinuteCounter());\n    },\n    \n    /**\n     * Flip the clock face\n     */\n     \n    flip: function(time, doNotAddPlayClass) {\n      if(!time) {\n        time = this.factory.time.getMinuteCounter();\n      }\n\n      this.base(time, doNotAddPlayClass);\n    }\n\n  });\n  \n}(jQuery));\n(function($) {\n    \n  /**\n   * Twelve Hour Clock Face\n   *\n   * This class will generate a twelve hour clock for FlipClock.js\n   *\n   * @param  object  The parent FlipClock.Factory object\n   * @param  object  An object of properties to override the default  \n   */\n   \n  FlipClock.TwelveHourClockFace = FlipClock.TwentyFourHourClockFace.extend({\n    \n    /**\n     * The meridium jQuery DOM object\n     */\n     \n    meridium: false,\n    \n    /**\n     * The meridium text as string for easy access\n     */\n     \n    meridiumText: 'AM',\n          \n    /**\n     * Build the clock face\n     *\n     * @param  object  Pass the time that should be used to display on the clock. \n     */\n     \n    build: function() {\n      var t = this;\n\n      var time = this.factory.time.getTime(false, this.showSeconds);\n\n      this.base(time);      \n      this.meridiumText = this.getMeridium();     \n      this.meridium = $([\n        '<ul class=\"flip-clock-meridium\">',\n          '<li>',\n            '<a href=\"#\">'+this.meridiumText+'</a>',\n          '</li>',\n        '</ul>'\n      ].join(''));\n            \n      this.meridium.insertAfter(this.lists[this.lists.length-1].$el);\n    },\n    \n    /**\n     * Flip the clock face\n     */\n     \n    flip: function(time, doNotAddPlayClass) {     \n      if(this.meridiumText != this.getMeridium()) {\n        this.meridiumText = this.getMeridium();\n        this.meridium.find('a').html(this.meridiumText);  \n      }\n      this.base(this.factory.time.getTime(false, this.showSeconds), doNotAddPlayClass); \n    },\n    \n    /**\n     * Get the current meridium\n     *\n     * @return  string  Returns the meridium (AM|PM)\n     */\n     \n    getMeridium: function() {\n      return new Date().getHours() >= 12 ? 'PM' : 'AM';\n    },\n    \n    /**\n     * Is it currently in the post-medirium?\n     *\n     * @return  bool  Returns true or false\n     */\n     \n    isPM: function() {\n      return this.getMeridium() == 'PM' ? true : false;\n    },\n\n    /**\n     * Is it currently before the post-medirium?\n     *\n     * @return  bool  Returns true or false\n     */\n     \n    isAM: function() {\n      return this.getMeridium() == 'AM' ? true : false;\n    }\n        \n  });\n  \n}(jQuery));\n(function($) {\n\n    /**\n     * FlipClock Arabic Language Pack\n     *\n     * This class will be used to translate tokens into the Arabic language.\n     *\n     */\n\n    FlipClock.Lang.Arabic = {\n\n      'years'   : 'سنوات',\n      'months'  : 'شهور',\n      'days'    : 'أيام',\n      'hours'   : 'ساعات',\n      'minutes' : 'دقائق',\n      'seconds' : 'ثواني'\n\n    };\n\n    /* Create various aliases for convenience */\n\n    FlipClock.Lang['ar']      = FlipClock.Lang.Arabic;\n    FlipClock.Lang['ar-ar']   = FlipClock.Lang.Arabic;\n    FlipClock.Lang['arabic']  = FlipClock.Lang.Arabic;\n\n}(jQuery));\n(function($) {\n    \n  /**\n   * FlipClock Danish Language Pack\n   *\n   * This class will used to translate tokens into the Danish language.\n   *  \n   */\n   \n  FlipClock.Lang.Danish = {\n    \n    'years'   : 'År',\n    'months'  : 'Måneder',\n    'days'    : 'Dage',\n    'hours'   : 'Timer',\n    'minutes' : 'Minutter',\n    'seconds' : 'Sekunder'  \n\n  };\n  \n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['da']     = FlipClock.Lang.Danish;\n  FlipClock.Lang['da-dk']  = FlipClock.Lang.Danish;\n  FlipClock.Lang['danish'] = FlipClock.Lang.Danish;\n\n}(jQuery));\n(function($) {\n    \n  /**\n   * FlipClock German Language Pack\n   *\n   * This class will used to translate tokens into the German language.\n   *  \n   */\n   \n  FlipClock.Lang.German = {\n    \n    'years'   : 'Jahre',\n    'months'  : 'Monate',\n    'days'    : 'Tage',\n    'hours'   : 'Stunden',\n    'minutes' : 'Minuten',\n    'seconds' : 'Sekunden'  \n \n  };\n  \n  /* Create various aliases for convenience */\n \n  FlipClock.Lang['de']     = FlipClock.Lang.German;\n  FlipClock.Lang['de-de']  = FlipClock.Lang.German;\n  FlipClock.Lang['german'] = FlipClock.Lang.German;\n \n}(jQuery));\n(function($) {\n    \n  /**\n   * FlipClock English Language Pack\n   *\n   * This class will used to translate tokens into the English language.\n   *  \n   */\n   \n  FlipClock.Lang.English = {\n    \n    'years'   : 'Years',\n    'months'  : 'Months',\n    'days'    : 'Days',\n    'hours'   : 'Hours',\n    'minutes' : 'Minutes',\n    'seconds' : 'Seconds' \n\n  };\n  \n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['en']      = FlipClock.Lang.English;\n  FlipClock.Lang['en-us']   = FlipClock.Lang.English;\n  FlipClock.Lang['english'] = FlipClock.Lang.English;\n\n}(jQuery));\n(function($) {\n\n  /**\n   * FlipClock Spanish Language Pack\n   *\n   * This class will used to translate tokens into the Spanish language.\n   *\n   */\n\n  FlipClock.Lang.Spanish = {\n\n    'years'   : 'Años',\n    'months'  : 'Meses',\n    'days'    : 'Días',\n    'hours'   : 'Horas',\n    'minutes' : 'Minutos',\n    'seconds' : 'Segundos'\n\n  };\n\n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['es']      = FlipClock.Lang.Spanish;\n  FlipClock.Lang['es-es']   = FlipClock.Lang.Spanish;\n  FlipClock.Lang['spanish'] = FlipClock.Lang.Spanish;\n\n}(jQuery));\n(function($) {\n    \n  /**\n   * FlipClock Finnish Language Pack\n   *\n   * This class will used to translate tokens into the Finnish language.\n   *  \n   */\n   \n  FlipClock.Lang.Finnish = {\n    \n    'years'   : 'Vuotta',\n    'months'  : 'Kuukautta',\n    'days'    : 'Päivää',\n    'hours'   : 'Tuntia',\n    'minutes' : 'Minuuttia',\n    'seconds' : 'Sekuntia'  \n\n  };\n  \n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['fi']      = FlipClock.Lang.Finnish;\n  FlipClock.Lang['fi-fi']   = FlipClock.Lang.Finnish;\n  FlipClock.Lang['finnish'] = FlipClock.Lang.Finnish;\n\n}(jQuery));\n\n(function($) {\n\n  /**\n   * FlipClock Canadian French Language Pack\n   *\n   * This class will used to translate tokens into the Canadian French language.\n   *\n   */\n\n  FlipClock.Lang.French = {\n\n    'years'   : 'Ans',\n    'months'  : 'Mois',\n    'days'    : 'Jours',\n    'hours'   : 'Heures',\n    'minutes' : 'Minutes',\n    'seconds' : 'Secondes'\n\n  };\n\n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['fr']      = FlipClock.Lang.French;\n  FlipClock.Lang['fr-ca']   = FlipClock.Lang.French;\n  FlipClock.Lang['french']  = FlipClock.Lang.French;\n\n}(jQuery));\n\n(function($) {\n    \n  /**\n   * FlipClock Italian Language Pack\n   *\n   * This class will used to translate tokens into the Italian language.\n   *  \n   */\n   \n  FlipClock.Lang.Italian = {\n    \n    'years'   : 'Anni',\n    'months'  : 'Mesi',\n    'days'    : 'Giorni',\n    'hours'   : 'Ore',\n    'minutes' : 'Minuti',\n    'seconds' : 'Secondi' \n\n  };\n  \n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['it']      = FlipClock.Lang.Italian;\n  FlipClock.Lang['it-it']   = FlipClock.Lang.Italian;\n  FlipClock.Lang['italian'] = FlipClock.Lang.Italian;\n  \n}(jQuery));\n\n(function($) {\n\n  /**\n   * FlipClock Latvian Language Pack\n   *\n   * This class will used to translate tokens into the Latvian language.\n   *\n   */\n\n  FlipClock.Lang.Latvian = {\n\n    'years'   : 'Gadi',\n    'months'  : 'Mēneši',\n    'days'    : 'Dienas',\n    'hours'   : 'Stundas',\n    'minutes' : 'Minūtes',\n    'seconds' : 'Sekundes'\n\n  };\n\n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['lv']      = FlipClock.Lang.Latvian;\n  FlipClock.Lang['lv-lv']   = FlipClock.Lang.Latvian;\n  FlipClock.Lang['latvian'] = FlipClock.Lang.Latvian;\n\n}(jQuery));\n(function($) {\n\n    /**\n     * FlipClock Dutch Language Pack\n     *\n     * This class will used to translate tokens into the Dutch language.\n     */\n\n    FlipClock.Lang.Dutch = {\n\n        'years'   : 'Jaren',\n        'months'  : 'Maanden',\n        'days'    : 'Dagen',\n        'hours'   : 'Uren',\n        'minutes' : 'Minuten',\n        'seconds' : 'Seconden'\n\n    };\n\n    /* Create various aliases for convenience */\n\n    FlipClock.Lang['nl']      = FlipClock.Lang.Dutch;\n    FlipClock.Lang['nl-be']   = FlipClock.Lang.Dutch;\n    FlipClock.Lang['dutch']   = FlipClock.Lang.Dutch;\n\n}(jQuery));\n\n(function($) {\n\n  /**\n   * FlipClock Norwegian-Bokmål Language Pack\n   *\n   * This class will used to translate tokens into the Norwegian language.\n   *  \n   */\n\n  FlipClock.Lang.Norwegian = {\n\n    'years'   : 'År',\n    'months'  : 'Måneder',\n    'days'    : 'Dager',\n    'hours'   : 'Timer',\n    'minutes' : 'Minutter',\n    'seconds' : 'Sekunder'  \n\n  };\n\n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['no']      = FlipClock.Lang.Norwegian;\n  FlipClock.Lang['nb']      = FlipClock.Lang.Norwegian;\n  FlipClock.Lang['no-nb']   = FlipClock.Lang.Norwegian;\n  FlipClock.Lang['norwegian'] = FlipClock.Lang.Norwegian;\n\n}(jQuery));\n\n(function($) {\n\n  /**\n   * FlipClock Portuguese Language Pack\n   *\n   * This class will used to translate tokens into the Portuguese language.\n   *\n   */\n\n  FlipClock.Lang.Portuguese = {\n\n    'years'   : 'Anos',\n    'months'  : 'Meses',\n    'days'    : 'Dias',\n    'hours'   : 'Horas',\n    'minutes' : 'Minutos',\n    'seconds' : 'Segundos'\n\n  };\n\n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['pt']         = FlipClock.Lang.Portuguese;\n  FlipClock.Lang['pt-br']      = FlipClock.Lang.Portuguese;\n  FlipClock.Lang['portuguese'] = FlipClock.Lang.Portuguese;\n\n}(jQuery));\n(function($) {\n\n  /**\n   * FlipClock Russian Language Pack\n   *\n   * This class will used to translate tokens into the Russian language.\n   *\n   */\n\n  FlipClock.Lang.Russian = {\n\n    'years'   : 'лет',\n    'months'  : 'месяцев',\n    'days'    : 'дней',\n    'hours'   : 'часов',\n    'minutes' : 'минут',\n    'seconds' : 'секунд'\n\n  };\n\n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['ru']      = FlipClock.Lang.Russian;\n  FlipClock.Lang['ru-ru']   = FlipClock.Lang.Russian;\n  FlipClock.Lang['russian']  = FlipClock.Lang.Russian;\n\n}(jQuery));\n(function($) {\n    \n  /**\n   * FlipClock Swedish Language Pack\n   *\n   * This class will used to translate tokens into the Swedish language.\n   *  \n   */\n   \n  FlipClock.Lang.Swedish = {\n    \n    'years'   : 'År',\n    'months'  : 'Månader',\n    'days'    : 'Dagar',\n    'hours'   : 'Timmar',\n    'minutes' : 'Minuter',\n    'seconds' : 'Sekunder'  \n\n  };\n  \n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['sv']      = FlipClock.Lang.Swedish;\n  FlipClock.Lang['sv-se']   = FlipClock.Lang.Swedish;\n  FlipClock.Lang['swedish'] = FlipClock.Lang.Swedish;\n\n}(jQuery));\n\n(function($) {\n    \n  /**\n   * FlipClock Chinese Language Pack\n   *\n   * This class will used to translate tokens into the Chinese language.\n   *  \n   */\n   \n  FlipClock.Lang.Chinese = {\n    \n    'years'   : '年',\n    'months'  : '月',\n    'days'    : '日',\n    'hours'   : '时',\n    'minutes' : '分',\n    'seconds' : '秒'\n\n  };\n  \n  /* Create various aliases for convenience */\n\n  FlipClock.Lang['zh']      = FlipClock.Lang.Chinese;\n  FlipClock.Lang['zh-cn']   = FlipClock.Lang.Chinese;\n  FlipClock.Lang['chinese'] = FlipClock.Lang.Chinese;\n\n}(jQuery));\n\n//# sourceURL=webpack:///./src/js/flipclock.js?");

/***/ })

/******/ });